/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2025 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* On demand includes */


/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Input Listeners */


/* System behavior and Macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {
        mt2: mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <500>;
            bindings = <&kp>, <&kp>;
            display-name = "Mod-Tap";
        };

    behaviors {
        dot_asterisk: dot_asterisk{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp LS(N8)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comma_pound: comma_pound{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp LS(N3)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        amper_caret: amper_caret{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp (LS(N7))>, <&kp LS(N6)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        paren: paren{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp (LS(N9))>, <&kp (LS(N0))>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ctrl_r_ctrl_s: ctrl_r_ctrl_s{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(R)>, <&kp LC(S)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        bkspace_del: bkspace_del{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        /* ctrl_n_p: ctrl_n_p{ */
        /*     compatible = "zmk,behavior-mod-morph"; */
        /*     #binding-cells = <0>; */
        /*     bindings = <&kp LC(N)>, <&kp LC(P)>; */
        /*     mods = <(MOD_LSFT|MOD_RSFT)>; */
        /* }; */
        percent_dollar: percent_dollar{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(N5)>, <&kp LS(N4)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_alttab: shift_alttab{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&kp TAB>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };
        esc_altbacktick: esc_altbacktick{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&lt 1 ESC>, <&kp GRAVE>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };
        j_special: j_special{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp LS(TAB)>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };
        k_special: k_special{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp K>, <&kp TAB>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };
        quote_special: quote_special{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(SQT)>, <&kp LC(LS(SQT))>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        a_special: a_special{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp TAB>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };
        s_special: s_special{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp S>, <&kp D>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };
        d_special: d_special{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp D>, <&kp GRAVE>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };
        f_special: f_special{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp F>, <&kp TAB>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };
        angular: angular{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(COMMA)>, <&kp LS(DOT)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        square: square{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp (LBKT)>, <&kp (RBKT)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        exclamation_pp: exclamation_pp{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(N1)>, <&kp LC(LA(J))>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        at_pp: at_pp{
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(N2)>, <&kp LC(LA(K))>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/* Automatically generated macro definitions */
/ {
    macros {
        /* vim_save: vim_save{ */
            /* compatible = "zmk,behavior-macro"; */
            /* #binding-cells = <0>; */
			/* wait-ms = <0>; */
            /* bindings */
                /* = <&kp LS(SEMI)> */
                /* , <&kp W> */
                /* , <&kp RET> */
                /* ; */
        /* }; */


    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {

    };
};

/* Automatically generated combos definitions */


/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
				&kp LC(Z)	 &kp PSCRN	  &kp LC(T)  &kp LC(C)  &kp LC(N)																												&angular  &ctrl_r_ctrl_s		   &kp LC(X)		   &kp LC(O)  &kp LC(LA(G))
				&kp LC(LA(B))  &exclamation_pp		 &at_pp  &kp LC(V)	  &kp LC(P)  &percent_dollar																				 &amper_caret	&paren	   &kp MINUS		   &kp EQUAL			&kp BSLH  &kp LC(LA(F))
				&kp LC(E)			&kp Q		  &kp W	  &kp E		  &kp R			&kp T																						&kp Y	 &kp U		   &kp I			   &kp O			   &kp P		&square
				&quote_special			&a_special		  &s_special &d_special &f_special			&kp G																						&kp H	 &j_special		   &kp K			   &kp L			&kp SEMI		&kp SQT
				&kp GRAVE			&kp Z		  &kp X	  &kp C		  &kp V			&kp B		&kp RET	 &kp LC(F)  &kp LC(D)  &kp LGUI		  &bkspace_del  &kp SPACE		 &kp N	 &kp M	&comma_pound	   &dot_asterisk			&kp FSLH	  &kp PG_UP
				&magic LAYER_Magic 0   &mt LCTRL HOME  &kp END	 &kp UP	   &kp DOWN				   &shift_alttab    &esc_altbacktick  &kp LC(W)   &kp TAB  &mt2 LALT LA(ESC)  &kp RSHFT                          				&kp LEFT	   &kp RIGHT  &kp LS(LBKT)  &mt RCTRL LS(RBKT)  &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
         &kp C_BRI_DN   &kp C_BRI_UP     &kp C_PREV     &kp C_NEXT       &kp C_PP                                                                                       &kp C_MUTE   &kp C_VOL_DN      &kp C_VOL_UP             &none  &kp PAUSE_BREAK
               &kp F11          &none          &none          &none          &none          &none                                                                 &none  &kp KP_NUM  &kp LC(LA(I))     &kp LC(LA(L))     &kp LC(LA(X))  &kp F12
               &trans  &kp LC(LS(Q))  &kp LC(LS(W))  &kp LC(LS(E))  &kp LC(LS(R))  &kp LC(LS(T))                                                         &kp LC(LS(Y))   &kp LC(LS(U))      &kp LC(LS(I))         &kp LA(O)     &kp KP_N9   &kp LC(LA(N6))
               &trans  &kp LC(LS(A))  &kp LC(LS(S))  &kp LC(LA(D))  &kp LA(F)  &kp LC(LS(G))                                                         &kp LC(LS(H))   &kp KP_N0      &kp KP_N1         &kp KP_N2         &kp LC(LA(SEMI))   &none
               &trans      &kp K_APP          &kp LC(LS(X))        &kp LC(LS(C))        &kp LC(LS(V))      &kp LC(LS(B))  &trans  &trans  &trans  &trans  &trans   &kp LC(LA(SPACE))          &none   &kp BSPC      &kp COMMA         &kp DOT   &kp LC(LA(DOT))    &kp LC(PG_UP)
 &magic LAYER_Magic 0          &none        &kp INS        &trans        &trans              &trans  &trans  &trans  &trans  &trans  &trans                      &kp LC(MINUS)          &kp LC(EQUAL)  &kp LC(LA(LBKT))  &kp LC(LA(RBKT))    &kp LC(PG_DN)
            >;
        };

        layer_Magic {
            bindings = <
      &kp F1           &kp F2           &kp F3           &kp F4           &kp F5                                                                                 &kp F6   &kp F7   &kp F8  &kp F9         &kp F10
  &bt BT_CLR            &none            &none            &none            &none            &none                                                         &none   &none    &none    &none   &none  &bt BT_CLR_ALL
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none    &none    &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none  &kp F11  &kp F12   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none    &none    &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none    &none    &none   &none           &none
            >;
        };

    };
};
